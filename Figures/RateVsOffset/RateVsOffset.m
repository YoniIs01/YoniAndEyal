%% Automate Importing Data by Generating Code Using the Database Explorer App
% This code reproduces the data obtained using the Database Explorer app by
% connecting to a database, executing a SQL query, and importing data into the
% MATLAB(R) workspace. To use this code, add the password for connecting to the
% database in the database command.

% Auto-generated by MATLAB Version 9.5 (R2018b) and Database Toolbox Version 9.0 on 05-Aug-2019 13:28:07

%% Make connection to database
conn = database('rockmodeling','Yoni','Yoni','com.mysql.jdbc.Driver','jdbc:mysql://localhost:3306/rockmodeling?useSSL=false&');

%% Execute query and fetch results
data = fetch(conn,['SELECT ' ...
    '    FileName, Orientation, NumGrains, AVG(Rate) AS Rate, std(Rate) AS Std ' ...
    'FROM ' ...
    '    (SELECT ' ...
    '        m.FileName, ' ...
    '            m.Orientation, ' ...
    '            m.NumGrains, ' ...
    '            tf.TotalDissolution / tf.NumOfSteps AS Rate ' ...
    '    FROM ' ...
    '        models AS m ' ...
    '    JOIN models_info AS mi ON mi.modelid = m._id ' ...
    '    JOIN totaldissolutiononStabilizedsteps AS tf ON tf.modelId = m._id ' ...
    '    WHERE ' ...
    '        m.Orientation != ''None'' ' ...
    '            AND m.RockType = 3 ' ...
    '            AND m.DoloPercent < 0.001 ' ...
    '            AND NumGrains IN (100 , 800, 1600) ' ...
    '    GROUP BY m._id , m.Orientation , m.NumGrains) AS t ' ...
    'GROUP BY Orientation , NumGrains ' ...
    'ORDER BY Orientation']);
%% Close connection to database
close(conn)

%% Clear variables
clear conn


%% Plotting
%figure;
i = 1;
Y = [];
Err = [];
% for i = 1:size(data,1)
%     m = ModelData.Load(data{i,1});
%     Temp_Tau_Factor=TauFactor('InLine',1,1,0,m.RockFirstImageInBB~=100,[1 1 0;0 0 0;0 0 0],[1 1 1]);
%     Tau_Factors_Down(i)=Temp_Tau_Factor.Tau_B1.Tau;
%     Tau_Factors_LR(i)=Temp_Tau_Factor.Tau_B2.Tau;
%     Densities(i)=100*Temp_Tau_Factor.Tau_B1.VolFrac;
%     Surf_Area(i)=Temp_Tau_Factor.Metrics.SurfAreaDens_over_um
% end
% data_updated=[Tau_Factors_Down' Tau_Factors_LR' Surf_Area'];
% data3=[data num2cell(data_updated)];

for NumGrain = unique(data.NumGrains)'
    Indexes = (data.NumGrains == NumGrain);
    Rates = data.Rate(Indexes);
    Errors = data.Std(Indexes);
    Y = [Y Rates];
    Err = [Err Errors];
    i = i+1;
end
X1 = cellfun(@str2num,data.Orientation(Indexes))*100;
%createfigure4(X1,Y(:,1),Y(:,2),Y(:,3),Err(:,1),Err(:,2),Err(:,3))
createfigure4(X1(1:6),Y(1:6,1),Y(1:6,2),Y(1:6,3),Err(1:6,1),Err(1:6,2),Err(1:6,3))

