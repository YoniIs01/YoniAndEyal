%% Automate Importing Data by Generating Code Using the Database Explorer App
% This code reproduces the data obtained using the Database Explorer app by
% connecting to a database, executing a SQL query, and importing data into the
% MATLAB(R) workspace. To use this code, add the password for connecting to the
% database in the database command.

% Auto-generated by MATLAB Version 9.5 (R2018b) and Database Toolbox Version 9.0 on 08-Aug-2019 12:10:57
SigmaCoefficentTable = [];
MuCoefficentTable = [];
fitfunction = fittype( @(M,c,x) M*(1-exp(-c.*(x-1))));
Alphas = [1:1:10 15:5:100];

for RockType = 11:11
    for NumGrains = [800]
        Sigmas = zeros(length(Alphas),1);
        Means = zeros(length(Alphas),1);
        indexes = [];
        for i = 1:length(Alphas)
            DoloRatio = Alphas(i);
            %% Make connection to database
            conn = database('rockmodeling?useSSL=false','Yoni','Yoni','com.mysql.jdbc.Driver','jdbc:mysql://localhost:3306/');
            RockType = num2str(RockType);
            NumGrains = num2str(NumGrains);
            %% Execute query and fetch results
            data = fetch(conn,['select ce.Area ' ...
                'from ChunkEvents ce ' ...
                'join models m ' ...
                'on ce.modelid = m._id ' ...
                'where rocktype = ' RockType ' ' ...
                '	and m.DoloPercent - ' num2str(DoloRatio) '  between 0 and 0.0001 ' ...
                '   and m.NumGrains = ' NumGrains '  '...
                '   /*and m.Orientation = ''Vertical''*/'...
                '   and ce.Area > 10 ']);
            %% Close connection to database
            close(conn); clear conn;
            if isempty(data)
                continue;
            end
            %% Calculating mean and sigma by mass
            indexes = [indexes;i];
            ReweightedData = reweightByMass(data.Area');
            Sigmas(i) = std(ReweightedData);
            Means(i) = mean(ReweightedData);
        end
        AlphasI = Alphas(indexes);
        SigmasI = Sigmas(indexes);
        MeansI = Means(indexes);
       
%% fitting to functions, and finding coefficients
    %% mus
        [MeanFit,gof] = fit(AlphasI',MeansI,fitfunction,'StartPoint',[200 0.08],'Lower',[0 0]);
        mRSquare = gof.rsquare;
        mCoeffvals = coeffvalues(MeanFit)';
        mCoefferrs = (sum(abs(confint(MeanFit) - coeffvalues(MeanFit)))/2)';
%        headers: Rock Type NumGrains RSquare M MError C CRrror
        MuCoefficentTable = [MuCoefficentTable;str2double(RockType) str2double(NumGrains) mRSquare reshape([mCoeffvals mCoefferrs]',[4 1])'];
    %% Sigmas
        [SigmaFit,gof] = fit(AlphasI',SigmasI,fitfunction,'StartPoint',[200 0.08],'Lower',[0 0]);
        sRSquare = gof.rsquare;
        sCoeffvals = coeffvalues(SigmaFit)';
        sCoefferrs = (sum(abs(confint(SigmaFit) - coeffvalues(SigmaFit)))/2)';
%        headers: Rock Type NumGrains RSquare S0 S0Error C CRrror R RError
        SigmaCoefficentTable = [SigmaCoefficentTable;str2double(RockType) str2double(NumGrains) sRSquare reshape([sCoeffvals sCoefferrs]',[4 1])'];
    %% Asimptotes
        m = ModelData.LoadFromQuery(strcat('RockType=',RockType,';NumGrains=',NumGrains,';DoloRatio=100'),1);
        GrainProps = m.GetInBBObjectsProps();
        InitialGrainAreas = [GrainProps.Area];
        ReweightedData = reweightByMass(InitialGrainAreas);
        InitialMean = mean(ReweightedData);
        InitialSigma = std(ReweightedData);
    %% Figure
        createfigure1(AlphasI,MeansI,SigmasI,MeanFit,SigmaFit,InitialMean,InitialSigma);
    end
end